// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giveaway/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetGiveawayRequest struct {
	Index uint64 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetGiveawayRequest) Reset()         { *m = QueryGetGiveawayRequest{} }
func (m *QueryGetGiveawayRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGiveawayRequest) ProtoMessage()    {}
func (*QueryGetGiveawayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{2}
}
func (m *QueryGetGiveawayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGiveawayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGiveawayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGiveawayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGiveawayRequest.Merge(m, src)
}
func (m *QueryGetGiveawayRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGiveawayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGiveawayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGiveawayRequest proto.InternalMessageInfo

func (m *QueryGetGiveawayRequest) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

type QueryGetGiveawayResponse struct {
	Giveaway Giveaway `protobuf:"bytes,1,opt,name=giveaway,proto3" json:"giveaway"`
}

func (m *QueryGetGiveawayResponse) Reset()         { *m = QueryGetGiveawayResponse{} }
func (m *QueryGetGiveawayResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGiveawayResponse) ProtoMessage()    {}
func (*QueryGetGiveawayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{3}
}
func (m *QueryGetGiveawayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGiveawayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGiveawayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGiveawayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGiveawayResponse.Merge(m, src)
}
func (m *QueryGetGiveawayResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGiveawayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGiveawayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGiveawayResponse proto.InternalMessageInfo

func (m *QueryGetGiveawayResponse) GetGiveaway() Giveaway {
	if m != nil {
		return m.Giveaway
	}
	return Giveaway{}
}

type QueryAllGiveawayRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGiveawayRequest) Reset()         { *m = QueryAllGiveawayRequest{} }
func (m *QueryAllGiveawayRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGiveawayRequest) ProtoMessage()    {}
func (*QueryAllGiveawayRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{4}
}
func (m *QueryAllGiveawayRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGiveawayRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGiveawayRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGiveawayRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGiveawayRequest.Merge(m, src)
}
func (m *QueryAllGiveawayRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGiveawayRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGiveawayRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGiveawayRequest proto.InternalMessageInfo

func (m *QueryAllGiveawayRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGiveawayResponse struct {
	Giveaway   []Giveaway          `protobuf:"bytes,1,rep,name=giveaway,proto3" json:"giveaway"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGiveawayResponse) Reset()         { *m = QueryAllGiveawayResponse{} }
func (m *QueryAllGiveawayResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGiveawayResponse) ProtoMessage()    {}
func (*QueryAllGiveawayResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{5}
}
func (m *QueryAllGiveawayResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGiveawayResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGiveawayResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGiveawayResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGiveawayResponse.Merge(m, src)
}
func (m *QueryAllGiveawayResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGiveawayResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGiveawayResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGiveawayResponse proto.InternalMessageInfo

func (m *QueryAllGiveawayResponse) GetGiveaway() []Giveaway {
	if m != nil {
		return m.Giveaway
	}
	return nil
}

func (m *QueryAllGiveawayResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGiveawayCountRequest struct {
}

func (m *QueryGetGiveawayCountRequest) Reset()         { *m = QueryGetGiveawayCountRequest{} }
func (m *QueryGetGiveawayCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGiveawayCountRequest) ProtoMessage()    {}
func (*QueryGetGiveawayCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{6}
}
func (m *QueryGetGiveawayCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGiveawayCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGiveawayCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGiveawayCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGiveawayCountRequest.Merge(m, src)
}
func (m *QueryGetGiveawayCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGiveawayCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGiveawayCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGiveawayCountRequest proto.InternalMessageInfo

type QueryGetGiveawayCountResponse struct {
	GiveawayCount GiveawayCount `protobuf:"bytes,1,opt,name=GiveawayCount,proto3" json:"GiveawayCount"`
}

func (m *QueryGetGiveawayCountResponse) Reset()         { *m = QueryGetGiveawayCountResponse{} }
func (m *QueryGetGiveawayCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGiveawayCountResponse) ProtoMessage()    {}
func (*QueryGetGiveawayCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{7}
}
func (m *QueryGetGiveawayCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGiveawayCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGiveawayCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGiveawayCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGiveawayCountResponse.Merge(m, src)
}
func (m *QueryGetGiveawayCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGiveawayCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGiveawayCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGiveawayCountResponse proto.InternalMessageInfo

func (m *QueryGetGiveawayCountResponse) GetGiveawayCount() GiveawayCount {
	if m != nil {
		return m.GiveawayCount
	}
	return GiveawayCount{}
}

type QueryGetGiveawayByHeightRequest struct {
	Height int64 `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *QueryGetGiveawayByHeightRequest) Reset()         { *m = QueryGetGiveawayByHeightRequest{} }
func (m *QueryGetGiveawayByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGiveawayByHeightRequest) ProtoMessage()    {}
func (*QueryGetGiveawayByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{8}
}
func (m *QueryGetGiveawayByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGiveawayByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGiveawayByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGiveawayByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGiveawayByHeightRequest.Merge(m, src)
}
func (m *QueryGetGiveawayByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGiveawayByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGiveawayByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGiveawayByHeightRequest proto.InternalMessageInfo

func (m *QueryGetGiveawayByHeightRequest) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryGetGiveawayByHeightResponse struct {
	GiveawayByHeight GiveawayByHeight `protobuf:"bytes,1,opt,name=giveawayByHeight,proto3" json:"giveawayByHeight"`
}

func (m *QueryGetGiveawayByHeightResponse) Reset()         { *m = QueryGetGiveawayByHeightResponse{} }
func (m *QueryGetGiveawayByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGiveawayByHeightResponse) ProtoMessage()    {}
func (*QueryGetGiveawayByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{9}
}
func (m *QueryGetGiveawayByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGiveawayByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGiveawayByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGiveawayByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGiveawayByHeightResponse.Merge(m, src)
}
func (m *QueryGetGiveawayByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGiveawayByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGiveawayByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGiveawayByHeightResponse proto.InternalMessageInfo

func (m *QueryGetGiveawayByHeightResponse) GetGiveawayByHeight() GiveawayByHeight {
	if m != nil {
		return m.GiveawayByHeight
	}
	return GiveawayByHeight{}
}

type QueryAllGiveawayByHeightRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGiveawayByHeightRequest) Reset()         { *m = QueryAllGiveawayByHeightRequest{} }
func (m *QueryAllGiveawayByHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGiveawayByHeightRequest) ProtoMessage()    {}
func (*QueryAllGiveawayByHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{10}
}
func (m *QueryAllGiveawayByHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGiveawayByHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGiveawayByHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGiveawayByHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGiveawayByHeightRequest.Merge(m, src)
}
func (m *QueryAllGiveawayByHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGiveawayByHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGiveawayByHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGiveawayByHeightRequest proto.InternalMessageInfo

func (m *QueryAllGiveawayByHeightRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGiveawayByHeightResponse struct {
	GiveawayByHeight []GiveawayByHeight  `protobuf:"bytes,1,rep,name=giveawayByHeight,proto3" json:"giveawayByHeight"`
	Pagination       *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGiveawayByHeightResponse) Reset()         { *m = QueryAllGiveawayByHeightResponse{} }
func (m *QueryAllGiveawayByHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGiveawayByHeightResponse) ProtoMessage()    {}
func (*QueryAllGiveawayByHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{11}
}
func (m *QueryAllGiveawayByHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGiveawayByHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGiveawayByHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGiveawayByHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGiveawayByHeightResponse.Merge(m, src)
}
func (m *QueryAllGiveawayByHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGiveawayByHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGiveawayByHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGiveawayByHeightResponse proto.InternalMessageInfo

func (m *QueryAllGiveawayByHeightResponse) GetGiveawayByHeight() []GiveawayByHeight {
	if m != nil {
		return m.GiveawayByHeight
	}
	return nil
}

func (m *QueryAllGiveawayByHeightResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGiveawayByRandomnessRequest struct {
	Round uint64 `protobuf:"varint,1,opt,name=round,proto3" json:"round,omitempty"`
}

func (m *QueryGetGiveawayByRandomnessRequest) Reset()         { *m = QueryGetGiveawayByRandomnessRequest{} }
func (m *QueryGetGiveawayByRandomnessRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGiveawayByRandomnessRequest) ProtoMessage()    {}
func (*QueryGetGiveawayByRandomnessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{12}
}
func (m *QueryGetGiveawayByRandomnessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGiveawayByRandomnessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGiveawayByRandomnessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGiveawayByRandomnessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGiveawayByRandomnessRequest.Merge(m, src)
}
func (m *QueryGetGiveawayByRandomnessRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGiveawayByRandomnessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGiveawayByRandomnessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGiveawayByRandomnessRequest proto.InternalMessageInfo

func (m *QueryGetGiveawayByRandomnessRequest) GetRound() uint64 {
	if m != nil {
		return m.Round
	}
	return 0
}

type QueryGetGiveawayByRandomnessResponse struct {
	GiveawayByRandomness GiveawayByRandomness `protobuf:"bytes,1,opt,name=giveawayByRandomness,proto3" json:"giveawayByRandomness"`
}

func (m *QueryGetGiveawayByRandomnessResponse) Reset()         { *m = QueryGetGiveawayByRandomnessResponse{} }
func (m *QueryGetGiveawayByRandomnessResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGiveawayByRandomnessResponse) ProtoMessage()    {}
func (*QueryGetGiveawayByRandomnessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{13}
}
func (m *QueryGetGiveawayByRandomnessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGiveawayByRandomnessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGiveawayByRandomnessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGiveawayByRandomnessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGiveawayByRandomnessResponse.Merge(m, src)
}
func (m *QueryGetGiveawayByRandomnessResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGiveawayByRandomnessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGiveawayByRandomnessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGiveawayByRandomnessResponse proto.InternalMessageInfo

func (m *QueryGetGiveawayByRandomnessResponse) GetGiveawayByRandomness() GiveawayByRandomness {
	if m != nil {
		return m.GiveawayByRandomness
	}
	return GiveawayByRandomness{}
}

type QueryAllGiveawayByRandomnessRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGiveawayByRandomnessRequest) Reset()         { *m = QueryAllGiveawayByRandomnessRequest{} }
func (m *QueryAllGiveawayByRandomnessRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGiveawayByRandomnessRequest) ProtoMessage()    {}
func (*QueryAllGiveawayByRandomnessRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{14}
}
func (m *QueryAllGiveawayByRandomnessRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGiveawayByRandomnessRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGiveawayByRandomnessRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGiveawayByRandomnessRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGiveawayByRandomnessRequest.Merge(m, src)
}
func (m *QueryAllGiveawayByRandomnessRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGiveawayByRandomnessRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGiveawayByRandomnessRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGiveawayByRandomnessRequest proto.InternalMessageInfo

func (m *QueryAllGiveawayByRandomnessRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGiveawayByRandomnessResponse struct {
	GiveawayByRandomness []GiveawayByRandomness `protobuf:"bytes,1,rep,name=giveawayByRandomness,proto3" json:"giveawayByRandomness"`
	Pagination           *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGiveawayByRandomnessResponse) Reset()         { *m = QueryAllGiveawayByRandomnessResponse{} }
func (m *QueryAllGiveawayByRandomnessResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGiveawayByRandomnessResponse) ProtoMessage()    {}
func (*QueryAllGiveawayByRandomnessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_401008c3ac713d20, []int{15}
}
func (m *QueryAllGiveawayByRandomnessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGiveawayByRandomnessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGiveawayByRandomnessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGiveawayByRandomnessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGiveawayByRandomnessResponse.Merge(m, src)
}
func (m *QueryAllGiveawayByRandomnessResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGiveawayByRandomnessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGiveawayByRandomnessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGiveawayByRandomnessResponse proto.InternalMessageInfo

func (m *QueryAllGiveawayByRandomnessResponse) GetGiveawayByRandomness() []GiveawayByRandomness {
	if m != nil {
		return m.GiveawayByRandomness
	}
	return nil
}

func (m *QueryAllGiveawayByRandomnessResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "dreanity.saturn.giveaway.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "dreanity.saturn.giveaway.QueryParamsResponse")
	proto.RegisterType((*QueryGetGiveawayRequest)(nil), "dreanity.saturn.giveaway.QueryGetGiveawayRequest")
	proto.RegisterType((*QueryGetGiveawayResponse)(nil), "dreanity.saturn.giveaway.QueryGetGiveawayResponse")
	proto.RegisterType((*QueryAllGiveawayRequest)(nil), "dreanity.saturn.giveaway.QueryAllGiveawayRequest")
	proto.RegisterType((*QueryAllGiveawayResponse)(nil), "dreanity.saturn.giveaway.QueryAllGiveawayResponse")
	proto.RegisterType((*QueryGetGiveawayCountRequest)(nil), "dreanity.saturn.giveaway.QueryGetGiveawayCountRequest")
	proto.RegisterType((*QueryGetGiveawayCountResponse)(nil), "dreanity.saturn.giveaway.QueryGetGiveawayCountResponse")
	proto.RegisterType((*QueryGetGiveawayByHeightRequest)(nil), "dreanity.saturn.giveaway.QueryGetGiveawayByHeightRequest")
	proto.RegisterType((*QueryGetGiveawayByHeightResponse)(nil), "dreanity.saturn.giveaway.QueryGetGiveawayByHeightResponse")
	proto.RegisterType((*QueryAllGiveawayByHeightRequest)(nil), "dreanity.saturn.giveaway.QueryAllGiveawayByHeightRequest")
	proto.RegisterType((*QueryAllGiveawayByHeightResponse)(nil), "dreanity.saturn.giveaway.QueryAllGiveawayByHeightResponse")
	proto.RegisterType((*QueryGetGiveawayByRandomnessRequest)(nil), "dreanity.saturn.giveaway.QueryGetGiveawayByRandomnessRequest")
	proto.RegisterType((*QueryGetGiveawayByRandomnessResponse)(nil), "dreanity.saturn.giveaway.QueryGetGiveawayByRandomnessResponse")
	proto.RegisterType((*QueryAllGiveawayByRandomnessRequest)(nil), "dreanity.saturn.giveaway.QueryAllGiveawayByRandomnessRequest")
	proto.RegisterType((*QueryAllGiveawayByRandomnessResponse)(nil), "dreanity.saturn.giveaway.QueryAllGiveawayByRandomnessResponse")
}

func init() { proto.RegisterFile("giveaway/query.proto", fileDescriptor_401008c3ac713d20) }

var fileDescriptor_401008c3ac713d20 = []byte{
	// 867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x97, 0x4b, 0x4f, 0xdb, 0x4a,
	0x14, 0xc7, 0x33, 0x04, 0x22, 0x34, 0xe8, 0x4a, 0x68, 0xc8, 0xbd, 0xa0, 0x08, 0x42, 0xee, 0x5c,
	0x6e, 0x41, 0x29, 0xb5, 0x21, 0x7d, 0xf0, 0xa8, 0x40, 0x85, 0x3e, 0xe8, 0x92, 0xa6, 0xea, 0xa6,
	0xaa, 0x44, 0x27, 0x64, 0xe4, 0x58, 0x4a, 0x3c, 0x21, 0x76, 0x28, 0x11, 0x42, 0xaa, 0xfa, 0x05,
	0x8a, 0xd4, 0x2f, 0xd0, 0x4d, 0x17, 0xdd, 0xf6, 0x23, 0x74, 0x45, 0x77, 0xa8, 0x5d, 0x94, 0x6e,
	0xaa, 0x0a, 0xfa, 0x41, 0xaa, 0x8c, 0x8f, 0xf3, 0xb0, 0x63, 0x6c, 0xa3, 0xac, 0xb0, 0x33, 0xe7,
	0xf1, 0xfb, 0x9f, 0x73, 0x34, 0xc7, 0xe0, 0xa4, 0xa6, 0xef, 0x73, 0xf6, 0x8a, 0x35, 0xd4, 0xbd,
	0x3a, 0xaf, 0x35, 0x94, 0x6a, 0x4d, 0x58, 0x82, 0x4c, 0x14, 0x6b, 0x9c, 0x19, 0xba, 0xd5, 0x50,
	0x4c, 0x66, 0xd5, 0x6b, 0x86, 0xe2, 0x58, 0xa5, 0x92, 0x9a, 0xd0, 0x84, 0x34, 0x52, 0x9b, 0x4f,
	0xb6, 0x7d, 0x6a, 0x52, 0x13, 0x42, 0x2b, 0x73, 0x95, 0x55, 0x75, 0x95, 0x19, 0x86, 0xb0, 0x98,
	0xa5, 0x0b, 0xc3, 0x84, 0xd3, 0xec, 0xae, 0x30, 0x2b, 0xc2, 0x54, 0x0b, 0xcc, 0xe4, 0x76, 0x1a,
	0x75, 0x7f, 0xb1, 0xc0, 0x2d, 0xb6, 0xa8, 0x56, 0x99, 0xa6, 0x1b, 0xd2, 0x18, 0x6c, 0xff, 0x6e,
	0xf1, 0x54, 0x59, 0x8d, 0x55, 0x9c, 0x10, 0xe3, 0xad, 0x9f, 0x9d, 0x07, 0x38, 0x98, 0xf2, 0x1c,
	0xec, 0xec, 0x8a, 0xba, 0x61, 0xc1, 0xf1, 0xbf, 0xde, 0xe3, 0x42, 0x63, 0xa7, 0xc4, 0x75, 0xad,
	0xe4, 0x98, 0xfc, 0xdf, 0xd3, 0xa4, 0xc6, 0x8c, 0xa2, 0xa8, 0x18, 0xdc, 0x04, 0x02, 0x9a, 0xc4,
	0xe4, 0x49, 0x13, 0x7d, 0x5b, 0x62, 0xe5, 0xf9, 0x5e, 0x9d, 0x9b, 0x16, 0x7d, 0x86, 0xc7, 0xba,
	0x7e, 0x35, 0xab, 0xc2, 0x30, 0x39, 0x59, 0xc7, 0x09, 0x1b, 0x7f, 0x02, 0x65, 0xd0, 0xdc, 0x48,
	0x2e, 0xa3, 0xf8, 0x15, 0x54, 0xb1, 0x3d, 0x37, 0x07, 0x4f, 0x7e, 0x4e, 0xc7, 0xf2, 0xe0, 0x45,
	0x55, 0x3c, 0x2e, 0xc3, 0x6e, 0x71, 0x6b, 0x0b, 0x0c, 0x21, 0x23, 0x49, 0xe2, 0x21, 0xdd, 0x28,
	0xf2, 0x03, 0x19, 0x79, 0x30, 0x6f, 0xbf, 0xd0, 0x97, 0x78, 0xc2, 0xeb, 0x00, 0x30, 0x0f, 0xf0,
	0xb0, 0x93, 0x0d, 0x70, 0xa8, 0x3f, 0x8e, 0xe3, 0x0d, 0x40, 0x2d, 0x4f, 0xca, 0x00, 0x69, 0xa3,
	0x5c, 0x76, 0x23, 0x3d, 0xc2, 0xb8, 0xdd, 0x47, 0x48, 0x71, 0x4d, 0xb1, 0x9b, 0xae, 0x34, 0x9b,
	0xae, 0xd8, 0xb3, 0x05, 0x4d, 0x57, 0xb6, 0x99, 0xc6, 0xc1, 0x37, 0xdf, 0xe1, 0x49, 0x3f, 0x22,
	0x50, 0xd1, 0x95, 0xa3, 0xa7, 0x8a, 0xf8, 0xd5, 0x54, 0x90, 0xad, 0x2e, 0xd4, 0x01, 0x89, 0x3a,
	0x1b, 0x88, 0x6a, 0x23, 0x74, 0xb1, 0xa6, 0xf1, 0xa4, 0xbb, 0xe0, 0xf7, 0x9b, 0x73, 0xe7, 0x0c,
	0x86, 0x85, 0xa7, 0x7c, 0xce, 0x41, 0xcf, 0x53, 0xfc, 0x57, 0xd7, 0x01, 0xd4, 0x6d, 0x36, 0x58,
	0x94, 0x34, 0x07, 0x65, 0xdd, 0x31, 0xe8, 0x0a, 0x9e, 0x76, 0x67, 0xdd, 0x6c, 0x3c, 0x96, 0xd3,
	0xee, 0x34, 0xeb, 0x1f, 0x9c, 0xb0, 0xc7, 0x5f, 0x26, 0x8c, 0xe7, 0xe1, 0x8d, 0xbe, 0x46, 0x38,
	0xe3, 0xef, 0x0b, 0xd0, 0x2f, 0xf0, 0xa8, 0xe6, 0x3a, 0x03, 0xee, 0x6c, 0x88, 0x66, 0x80, 0x07,
	0xa0, 0x7b, 0x22, 0x51, 0x1d, 0xe8, 0x3b, 0xda, 0xef, 0xa6, 0xef, 0xd7, 0xa8, 0x7d, 0x71, 0xd4,
	0xf6, 0xcc, 0x75, 0xa9, 0xda, 0x78, 0x7f, 0xd4, 0xf6, 0x6f, 0x14, 0xef, 0xe2, 0xff, 0xbc, 0x8d,
	0xcb, 0xb7, 0xee, 0xaf, 0x8e, 0x8b, 0xa3, 0x26, 0xea, 0x46, 0xd1, 0xb9, 0x38, 0xe4, 0x0b, 0x3d,
	0x46, 0x78, 0xe6, 0x72, 0x6f, 0x28, 0x46, 0xa9, 0xbd, 0x2a, 0x3a, 0xcf, 0xa1, 0x07, 0x4a, 0x98,
	0x82, 0xb4, 0xbd, 0xa0, 0x28, 0x3d, 0x23, 0xd2, 0x0a, 0xe8, 0xe9, 0x6a, 0x8d, 0x57, 0x4f, 0xbf,
	0x46, 0xe1, 0x87, 0x53, 0x01, 0xdf, 0x7c, 0x81, 0x15, 0x88, 0xf7, 0xb7, 0x02, 0x7d, 0x1b, 0x8d,
	0xdc, 0xd9, 0x08, 0x1e, 0x92, 0xda, 0xc8, 0x5b, 0x84, 0x13, 0xf6, 0xaa, 0x21, 0xf3, 0xfe, 0xa4,
	0xde, 0x0d, 0x97, 0xba, 0x11, 0xd2, 0xda, 0xce, 0x4e, 0xe7, 0xde, 0x7c, 0xfb, 0xfd, 0x6e, 0x80,
	0x92, 0x8c, 0xea, 0xb8, 0xa9, 0xb6, 0x9b, 0xea, 0x5a, 0xec, 0xe4, 0x03, 0xc2, 0xc3, 0x4e, 0x65,
	0xc8, 0x62, 0x40, 0x16, 0xef, 0x22, 0x4c, 0xe5, 0xa2, 0xb8, 0x00, 0x5d, 0x4e, 0xd2, 0xcd, 0x93,
	0xac, 0x3f, 0x5d, 0xeb, 0xe1, 0x50, 0x6e, 0xd6, 0x23, 0xf2, 0x1e, 0xe1, 0x11, 0x27, 0xd0, 0x46,
	0xb9, 0x1c, 0x88, 0xea, 0x5d, 0x90, 0x81, 0xa8, 0x3d, 0xf6, 0x1d, 0xcd, 0x4a, 0xd4, 0x19, 0x42,
	0x83, 0x51, 0xc9, 0x27, 0xe4, 0x5a, 0x26, 0xe4, 0x4e, 0xf8, 0xe2, 0x74, 0xae, 0xad, 0xd4, 0x52,
	0x64, 0x3f, 0xc0, 0x5d, 0x90, 0xb8, 0x59, 0x32, 0x17, 0x8c, 0x6b, 0x7f, 0xa0, 0x91, 0x13, 0x84,
	0x47, 0xdd, 0x97, 0x25, 0x59, 0x09, 0x9f, 0xdf, 0xb5, 0x1a, 0x52, 0xab, 0x57, 0x71, 0x05, 0xfa,
	0x35, 0x49, 0xbf, 0x44, 0x6e, 0x87, 0xa0, 0x6f, 0x7d, 0x3f, 0xaa, 0x87, 0xf6, 0xdf, 0x23, 0xf2,
	0x19, 0xe1, 0x31, 0x77, 0xec, 0xe6, 0xa8, 0xac, 0x84, 0xef, 0x7b, 0x54, 0x35, 0x97, 0xec, 0x2d,
	0x7a, 0x4b, 0xaa, 0x51, 0xc8, 0x7c, 0x14, 0x35, 0xe4, 0x3b, 0xc2, 0xc9, 0x5e, 0x37, 0x15, 0x59,
	0x8b, 0x52, 0x58, 0xcf, 0x3d, 0x9d, 0x5a, 0xbf, 0xaa, 0x3b, 0xa8, 0xb9, 0x27, 0xd5, 0xac, 0x92,
	0xe5, 0x70, 0x6a, 0xda, 0x1f, 0xee, 0xea, 0xa1, 0x5c, 0x71, 0x47, 0xe4, 0x2b, 0xc2, 0xe3, 0xbd,
	0x52, 0x34, 0x5b, 0xb4, 0x16, 0xa5, 0xce, 0xd1, 0xc5, 0x05, 0xec, 0x14, 0xba, 0x2c, 0xc5, 0xe5,
	0xc8, 0x42, 0x54, 0x71, 0x9b, 0x0f, 0x4f, 0xce, 0xd3, 0xe8, 0xf4, 0x3c, 0x8d, 0x7e, 0x9d, 0xa7,
	0xd1, 0xf1, 0x45, 0x3a, 0x76, 0x7a, 0x91, 0x8e, 0x9d, 0x5d, 0xa4, 0x63, 0xcf, 0xaf, 0x6b, 0xba,
	0x55, 0xaa, 0x17, 0x94, 0x5d, 0x51, 0xf1, 0x44, 0x3d, 0x68, 0xc7, 0xb5, 0x1a, 0x55, 0x6e, 0x16,
	0x12, 0xf2, 0xbf, 0x9b, 0x9b, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x51, 0xb3, 0xc9, 0x6f, 0x08,
	0x0e, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a Giveaway by index.
	Giveaway(ctx context.Context, in *QueryGetGiveawayRequest, opts ...grpc.CallOption) (*QueryGetGiveawayResponse, error)
	// Queries a list of Giveaway items.
	GiveawayAll(ctx context.Context, in *QueryAllGiveawayRequest, opts ...grpc.CallOption) (*QueryAllGiveawayResponse, error)
	// Queries a GiveawayCount by index.
	GiveawayCount(ctx context.Context, in *QueryGetGiveawayCountRequest, opts ...grpc.CallOption) (*QueryGetGiveawayCountResponse, error)
	// Queries a GiveawayByHeight by index.
	GiveawayByHeight(ctx context.Context, in *QueryGetGiveawayByHeightRequest, opts ...grpc.CallOption) (*QueryGetGiveawayByHeightResponse, error)
	// Queries a list of GiveawayByHeight items.
	GiveawayByHeightAll(ctx context.Context, in *QueryAllGiveawayByHeightRequest, opts ...grpc.CallOption) (*QueryAllGiveawayByHeightResponse, error)
	// Queries a GiveawayByRandomness by index.
	GiveawayByRandomness(ctx context.Context, in *QueryGetGiveawayByRandomnessRequest, opts ...grpc.CallOption) (*QueryGetGiveawayByRandomnessResponse, error)
	// Queries a list of GiveawayByRandomness items.
	GiveawayByRandomnessAll(ctx context.Context, in *QueryAllGiveawayByRandomnessRequest, opts ...grpc.CallOption) (*QueryAllGiveawayByRandomnessResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/dreanity.saturn.giveaway.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Giveaway(ctx context.Context, in *QueryGetGiveawayRequest, opts ...grpc.CallOption) (*QueryGetGiveawayResponse, error) {
	out := new(QueryGetGiveawayResponse)
	err := c.cc.Invoke(ctx, "/dreanity.saturn.giveaway.Query/Giveaway", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GiveawayAll(ctx context.Context, in *QueryAllGiveawayRequest, opts ...grpc.CallOption) (*QueryAllGiveawayResponse, error) {
	out := new(QueryAllGiveawayResponse)
	err := c.cc.Invoke(ctx, "/dreanity.saturn.giveaway.Query/GiveawayAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GiveawayCount(ctx context.Context, in *QueryGetGiveawayCountRequest, opts ...grpc.CallOption) (*QueryGetGiveawayCountResponse, error) {
	out := new(QueryGetGiveawayCountResponse)
	err := c.cc.Invoke(ctx, "/dreanity.saturn.giveaway.Query/GiveawayCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GiveawayByHeight(ctx context.Context, in *QueryGetGiveawayByHeightRequest, opts ...grpc.CallOption) (*QueryGetGiveawayByHeightResponse, error) {
	out := new(QueryGetGiveawayByHeightResponse)
	err := c.cc.Invoke(ctx, "/dreanity.saturn.giveaway.Query/GiveawayByHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GiveawayByHeightAll(ctx context.Context, in *QueryAllGiveawayByHeightRequest, opts ...grpc.CallOption) (*QueryAllGiveawayByHeightResponse, error) {
	out := new(QueryAllGiveawayByHeightResponse)
	err := c.cc.Invoke(ctx, "/dreanity.saturn.giveaway.Query/GiveawayByHeightAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GiveawayByRandomness(ctx context.Context, in *QueryGetGiveawayByRandomnessRequest, opts ...grpc.CallOption) (*QueryGetGiveawayByRandomnessResponse, error) {
	out := new(QueryGetGiveawayByRandomnessResponse)
	err := c.cc.Invoke(ctx, "/dreanity.saturn.giveaway.Query/GiveawayByRandomness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GiveawayByRandomnessAll(ctx context.Context, in *QueryAllGiveawayByRandomnessRequest, opts ...grpc.CallOption) (*QueryAllGiveawayByRandomnessResponse, error) {
	out := new(QueryAllGiveawayByRandomnessResponse)
	err := c.cc.Invoke(ctx, "/dreanity.saturn.giveaway.Query/GiveawayByRandomnessAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a Giveaway by index.
	Giveaway(context.Context, *QueryGetGiveawayRequest) (*QueryGetGiveawayResponse, error)
	// Queries a list of Giveaway items.
	GiveawayAll(context.Context, *QueryAllGiveawayRequest) (*QueryAllGiveawayResponse, error)
	// Queries a GiveawayCount by index.
	GiveawayCount(context.Context, *QueryGetGiveawayCountRequest) (*QueryGetGiveawayCountResponse, error)
	// Queries a GiveawayByHeight by index.
	GiveawayByHeight(context.Context, *QueryGetGiveawayByHeightRequest) (*QueryGetGiveawayByHeightResponse, error)
	// Queries a list of GiveawayByHeight items.
	GiveawayByHeightAll(context.Context, *QueryAllGiveawayByHeightRequest) (*QueryAllGiveawayByHeightResponse, error)
	// Queries a GiveawayByRandomness by index.
	GiveawayByRandomness(context.Context, *QueryGetGiveawayByRandomnessRequest) (*QueryGetGiveawayByRandomnessResponse, error)
	// Queries a list of GiveawayByRandomness items.
	GiveawayByRandomnessAll(context.Context, *QueryAllGiveawayByRandomnessRequest) (*QueryAllGiveawayByRandomnessResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Giveaway(ctx context.Context, req *QueryGetGiveawayRequest) (*QueryGetGiveawayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Giveaway not implemented")
}
func (*UnimplementedQueryServer) GiveawayAll(ctx context.Context, req *QueryAllGiveawayRequest) (*QueryAllGiveawayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveawayAll not implemented")
}
func (*UnimplementedQueryServer) GiveawayCount(ctx context.Context, req *QueryGetGiveawayCountRequest) (*QueryGetGiveawayCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveawayCount not implemented")
}
func (*UnimplementedQueryServer) GiveawayByHeight(ctx context.Context, req *QueryGetGiveawayByHeightRequest) (*QueryGetGiveawayByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveawayByHeight not implemented")
}
func (*UnimplementedQueryServer) GiveawayByHeightAll(ctx context.Context, req *QueryAllGiveawayByHeightRequest) (*QueryAllGiveawayByHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveawayByHeightAll not implemented")
}
func (*UnimplementedQueryServer) GiveawayByRandomness(ctx context.Context, req *QueryGetGiveawayByRandomnessRequest) (*QueryGetGiveawayByRandomnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveawayByRandomness not implemented")
}
func (*UnimplementedQueryServer) GiveawayByRandomnessAll(ctx context.Context, req *QueryAllGiveawayByRandomnessRequest) (*QueryAllGiveawayByRandomnessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveawayByRandomnessAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreanity.saturn.giveaway.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Giveaway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGiveawayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Giveaway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreanity.saturn.giveaway.Query/Giveaway",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Giveaway(ctx, req.(*QueryGetGiveawayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GiveawayAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGiveawayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GiveawayAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreanity.saturn.giveaway.Query/GiveawayAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GiveawayAll(ctx, req.(*QueryAllGiveawayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GiveawayCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGiveawayCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GiveawayCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreanity.saturn.giveaway.Query/GiveawayCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GiveawayCount(ctx, req.(*QueryGetGiveawayCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GiveawayByHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGiveawayByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GiveawayByHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreanity.saturn.giveaway.Query/GiveawayByHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GiveawayByHeight(ctx, req.(*QueryGetGiveawayByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GiveawayByHeightAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGiveawayByHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GiveawayByHeightAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreanity.saturn.giveaway.Query/GiveawayByHeightAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GiveawayByHeightAll(ctx, req.(*QueryAllGiveawayByHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GiveawayByRandomness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGiveawayByRandomnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GiveawayByRandomness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreanity.saturn.giveaway.Query/GiveawayByRandomness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GiveawayByRandomness(ctx, req.(*QueryGetGiveawayByRandomnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GiveawayByRandomnessAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGiveawayByRandomnessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GiveawayByRandomnessAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dreanity.saturn.giveaway.Query/GiveawayByRandomnessAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GiveawayByRandomnessAll(ctx, req.(*QueryAllGiveawayByRandomnessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dreanity.saturn.giveaway.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Giveaway",
			Handler:    _Query_Giveaway_Handler,
		},
		{
			MethodName: "GiveawayAll",
			Handler:    _Query_GiveawayAll_Handler,
		},
		{
			MethodName: "GiveawayCount",
			Handler:    _Query_GiveawayCount_Handler,
		},
		{
			MethodName: "GiveawayByHeight",
			Handler:    _Query_GiveawayByHeight_Handler,
		},
		{
			MethodName: "GiveawayByHeightAll",
			Handler:    _Query_GiveawayByHeightAll_Handler,
		},
		{
			MethodName: "GiveawayByRandomness",
			Handler:    _Query_GiveawayByRandomness_Handler,
		},
		{
			MethodName: "GiveawayByRandomnessAll",
			Handler:    _Query_GiveawayByRandomnessAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "giveaway/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetGiveawayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGiveawayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGiveawayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGiveawayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGiveawayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGiveawayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Giveaway.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGiveawayRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGiveawayRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGiveawayRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGiveawayResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGiveawayResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGiveawayResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Giveaway) > 0 {
		for iNdEx := len(m.Giveaway) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Giveaway[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGiveawayCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGiveawayCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGiveawayCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetGiveawayCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGiveawayCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGiveawayCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GiveawayCount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetGiveawayByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGiveawayByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGiveawayByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGiveawayByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGiveawayByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGiveawayByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GiveawayByHeight.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGiveawayByHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGiveawayByHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGiveawayByHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGiveawayByHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGiveawayByHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGiveawayByHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GiveawayByHeight) > 0 {
		for iNdEx := len(m.GiveawayByHeight) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GiveawayByHeight[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGiveawayByRandomnessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGiveawayByRandomnessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGiveawayByRandomnessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Round != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Round))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGiveawayByRandomnessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGiveawayByRandomnessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGiveawayByRandomnessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GiveawayByRandomness.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllGiveawayByRandomnessRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGiveawayByRandomnessRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGiveawayByRandomnessRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGiveawayByRandomnessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGiveawayByRandomnessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGiveawayByRandomnessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GiveawayByRandomness) > 0 {
		for iNdEx := len(m.GiveawayByRandomness) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GiveawayByRandomness[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetGiveawayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func (m *QueryGetGiveawayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Giveaway.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGiveawayRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGiveawayResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Giveaway) > 0 {
		for _, e := range m.Giveaway {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGiveawayCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetGiveawayCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GiveawayCount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetGiveawayByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryGetGiveawayByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GiveawayByHeight.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGiveawayByHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGiveawayByHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GiveawayByHeight) > 0 {
		for _, e := range m.GiveawayByHeight {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGiveawayByRandomnessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Round != 0 {
		n += 1 + sovQuery(uint64(m.Round))
	}
	return n
}

func (m *QueryGetGiveawayByRandomnessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GiveawayByRandomness.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllGiveawayByRandomnessRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGiveawayByRandomnessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GiveawayByRandomness) > 0 {
		for _, e := range m.GiveawayByRandomness {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGiveawayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGiveawayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGiveawayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGiveawayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGiveawayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGiveawayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Giveaway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Giveaway.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGiveawayRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGiveawayRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGiveawayRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGiveawayResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGiveawayResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGiveawayResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Giveaway", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Giveaway = append(m.Giveaway, Giveaway{})
			if err := m.Giveaway[len(m.Giveaway)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGiveawayCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGiveawayCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGiveawayCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGiveawayCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGiveawayCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGiveawayCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveawayCount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GiveawayCount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGiveawayByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGiveawayByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGiveawayByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGiveawayByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGiveawayByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGiveawayByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveawayByHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GiveawayByHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGiveawayByHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGiveawayByHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGiveawayByHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGiveawayByHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGiveawayByHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGiveawayByHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveawayByHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiveawayByHeight = append(m.GiveawayByHeight, GiveawayByHeight{})
			if err := m.GiveawayByHeight[len(m.GiveawayByHeight)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGiveawayByRandomnessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGiveawayByRandomnessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGiveawayByRandomnessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			m.Round = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Round |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGiveawayByRandomnessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGiveawayByRandomnessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGiveawayByRandomnessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveawayByRandomness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GiveawayByRandomness.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGiveawayByRandomnessRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGiveawayByRandomnessRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGiveawayByRandomnessRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGiveawayByRandomnessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGiveawayByRandomnessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGiveawayByRandomnessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveawayByRandomness", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GiveawayByRandomness = append(m.GiveawayByRandomness, GiveawayByRandomness{})
			if err := m.GiveawayByRandomness[len(m.GiveawayByRandomness)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
