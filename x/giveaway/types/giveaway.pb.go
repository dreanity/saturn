// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giveaway/giveaway.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GiveawayStatus int32

const (
	GiveawayStatus_TICKETS_REGISTRATION    GiveawayStatus = 0
	GiveawayStatus_WINNERS_DETERMINATION   GiveawayStatus = 1
	GiveawayStatus_WINNERS_DETERMINED      GiveawayStatus = 2
	GiveawayStatus_CANCELLED_INSUF_TICKETS GiveawayStatus = 3
)

var GiveawayStatus_name = map[int32]string{
	0: "TICKETS_REGISTRATION",
	1: "WINNERS_DETERMINATION",
	2: "WINNERS_DETERMINED",
	3: "CANCELLED_INSUF_TICKETS",
}

var GiveawayStatus_value = map[string]int32{
	"TICKETS_REGISTRATION":    0,
	"WINNERS_DETERMINATION":   1,
	"WINNERS_DETERMINED":      2,
	"CANCELLED_INSUF_TICKETS": 3,
}

func (x GiveawayStatus) String() string {
	return proto.EnumName(GiveawayStatus_name, int32(x))
}

func (GiveawayStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1cf0a435194c6a42, []int{0}
}

type Giveaway struct {
	Index                uint32         `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Creator              string         `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Duration             int64          `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	CreatedAt            int64          `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Name                 string         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Prizes               []Prize        `protobuf:"bytes,6,rep,name=prizes,proto3" json:"prizes"`
	CompletionHeight     int64          `protobuf:"varint,7,opt,name=completionHeight,proto3" json:"completionHeight,omitempty"`
	Status               GiveawayStatus `protobuf:"varint,8,opt,name=status,proto3,enum=dreanity.saturn.giveaway.GiveawayStatus" json:"status,omitempty"`
	WinningTicketNumbers []uint32       `protobuf:"varint,9,rep,packed,name=winningTicketNumbers,proto3" json:"winningTicketNumbers,omitempty"`
}

func (m *Giveaway) Reset()         { *m = Giveaway{} }
func (m *Giveaway) String() string { return proto.CompactTextString(m) }
func (*Giveaway) ProtoMessage()    {}
func (*Giveaway) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cf0a435194c6a42, []int{0}
}
func (m *Giveaway) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Giveaway) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Giveaway.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Giveaway) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Giveaway.Merge(m, src)
}
func (m *Giveaway) XXX_Size() int {
	return m.Size()
}
func (m *Giveaway) XXX_DiscardUnknown() {
	xxx_messageInfo_Giveaway.DiscardUnknown(m)
}

var xxx_messageInfo_Giveaway proto.InternalMessageInfo

func (m *Giveaway) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *Giveaway) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Giveaway) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Giveaway) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Giveaway) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Giveaway) GetPrizes() []Prize {
	if m != nil {
		return m.Prizes
	}
	return nil
}

func (m *Giveaway) GetCompletionHeight() int64 {
	if m != nil {
		return m.CompletionHeight
	}
	return 0
}

func (m *Giveaway) GetStatus() GiveawayStatus {
	if m != nil {
		return m.Status
	}
	return GiveawayStatus_TICKETS_REGISTRATION
}

func (m *Giveaway) GetWinningTicketNumbers() []uint32 {
	if m != nil {
		return m.WinningTicketNumbers
	}
	return nil
}

func init() {
	proto.RegisterEnum("dreanity.saturn.giveaway.GiveawayStatus", GiveawayStatus_name, GiveawayStatus_value)
	proto.RegisterType((*Giveaway)(nil), "dreanity.saturn.giveaway.Giveaway")
}

func init() { proto.RegisterFile("giveaway/giveaway.proto", fileDescriptor_1cf0a435194c6a42) }

var fileDescriptor_1cf0a435194c6a42 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xbd, 0x71, 0x9a, 0x26, 0x8b, 0x5a, 0x45, 0x23, 0x43, 0x97, 0x80, 0x5c, 0x8b, 0x93,
	0x55, 0x24, 0x5b, 0x0a, 0x67, 0x24, 0xd2, 0x64, 0x29, 0x16, 0xc5, 0xa0, 0xb5, 0x11, 0x12, 0x97,
	0xc8, 0x49, 0x56, 0xee, 0x0a, 0x62, 0x47, 0xeb, 0x35, 0x6d, 0xfa, 0x14, 0x3c, 0x56, 0x8f, 0x3d,
	0x72, 0x42, 0x28, 0x39, 0xf1, 0x16, 0x28, 0xeb, 0x38, 0x88, 0x3f, 0xbd, 0xcd, 0xcc, 0xef, 0x9b,
	0x6f, 0x76, 0x47, 0x83, 0x8f, 0x52, 0xf1, 0x85, 0x27, 0x97, 0xc9, 0xd2, 0xaf, 0x03, 0x6f, 0x21,
	0x73, 0x95, 0x03, 0x99, 0x49, 0x9e, 0x64, 0x42, 0x2d, 0xbd, 0x22, 0x51, 0xa5, 0xcc, 0xbc, 0x9a,
	0xf7, 0xac, 0x34, 0x4f, 0x73, 0x2d, 0xf2, 0x37, 0x51, 0xa5, 0xef, 0x59, 0x3b, 0xa3, 0x85, 0x14,
	0xd7, 0xbc, 0xaa, 0x3e, 0xf9, 0xd9, 0xc0, 0xed, 0xb3, 0x2d, 0x00, 0x0b, 0xef, 0x89, 0x6c, 0xc6,
	0xaf, 0x08, 0x72, 0x90, 0x7b, 0xc0, 0xaa, 0x04, 0x08, 0xde, 0x9f, 0x4a, 0x9e, 0xa8, 0x5c, 0x92,
	0x86, 0x83, 0xdc, 0x0e, 0xab, 0x53, 0xe8, 0xe1, 0xf6, 0xac, 0x94, 0x89, 0x12, 0x79, 0x46, 0x4c,
	0x07, 0xb9, 0x26, 0xdb, 0xe5, 0xf0, 0x18, 0x77, 0xb4, 0x8c, 0xcf, 0x06, 0x8a, 0x34, 0x35, 0xfc,
	0x5d, 0x00, 0xc0, 0xcd, 0x2c, 0x99, 0x73, 0xb2, 0xa7, 0x0d, 0x75, 0x0c, 0xcf, 0x71, 0x4b, 0xbf,
	0xac, 0x20, 0x2d, 0xc7, 0x74, 0xef, 0xf5, 0x8f, 0xbd, 0xbb, 0x7e, 0xe8, 0xbd, 0xdb, 0xe8, 0x4e,
	0x9b, 0x37, 0xdf, 0x8f, 0x0d, 0xb6, 0x6d, 0x82, 0x13, 0xdc, 0x9d, 0xe6, 0xf3, 0xc5, 0x67, 0xbe,
	0x19, 0xff, 0x8a, 0x8b, 0xf4, 0x42, 0x91, 0x7d, 0x3d, 0xf7, 0x9f, 0x3a, 0xbc, 0xc0, 0xad, 0x42,
	0x25, 0xaa, 0x2c, 0x48, 0xdb, 0x41, 0xee, 0x61, 0xdf, 0xbd, 0x7b, 0x54, 0xbd, 0x9c, 0x48, 0xeb,
	0xd9, 0xb6, 0x0f, 0xfa, 0xd8, 0xba, 0x14, 0x59, 0x26, 0xb2, 0x34, 0x16, 0xd3, 0x4f, 0x5c, 0x85,
	0xe5, 0x7c, 0xc2, 0x65, 0x41, 0x3a, 0x8e, 0xe9, 0x1e, 0xb0, 0xff, 0xb2, 0x93, 0x6b, 0x7c, 0xf8,
	0xa7, 0x1b, 0x10, 0x6c, 0xc5, 0xc1, 0xf0, 0x35, 0x8d, 0xa3, 0x31, 0xa3, 0x67, 0x41, 0x14, 0xb3,
	0x41, 0x1c, 0xbc, 0x0d, 0xbb, 0x06, 0x3c, 0xc4, 0xf7, 0x3f, 0x04, 0x61, 0x48, 0x59, 0x34, 0x1e,
	0xd1, 0x98, 0xb2, 0x37, 0x41, 0x58, 0x21, 0x04, 0x0f, 0x30, 0xfc, 0x8d, 0xe8, 0xa8, 0xdb, 0x80,
	0x47, 0xf8, 0x68, 0x38, 0x08, 0x87, 0xf4, 0xfc, 0x9c, 0x8e, 0xc6, 0x41, 0x18, 0xbd, 0x7f, 0x39,
	0xde, 0x9a, 0x77, 0xcd, 0x53, 0x7a, 0xb3, 0xb2, 0xd1, 0xed, 0xca, 0x46, 0x3f, 0x56, 0x36, 0xfa,
	0xba, 0xb6, 0x8d, 0xdb, 0xb5, 0x6d, 0x7c, 0x5b, 0xdb, 0xc6, 0xc7, 0xa7, 0xa9, 0x50, 0x17, 0xe5,
	0xc4, 0x9b, 0xe6, 0x73, 0xbf, 0xde, 0x82, 0x5f, 0x6d, 0xc1, 0xbf, 0xda, 0x1d, 0x9d, 0xaf, 0x96,
	0x0b, 0x5e, 0x4c, 0x5a, 0xfa, 0x6a, 0x9e, 0xfd, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x50, 0x2a, 0xb6,
	0x95, 0x96, 0x02, 0x00, 0x00,
}

func (m *Giveaway) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Giveaway) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Giveaway) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WinningTicketNumbers) > 0 {
		dAtA2 := make([]byte, len(m.WinningTicketNumbers)*10)
		var j1 int
		for _, num := range m.WinningTicketNumbers {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGiveaway(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if m.Status != 0 {
		i = encodeVarintGiveaway(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.CompletionHeight != 0 {
		i = encodeVarintGiveaway(dAtA, i, uint64(m.CompletionHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Prizes) > 0 {
		for iNdEx := len(m.Prizes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prizes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGiveaway(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGiveaway(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintGiveaway(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Duration != 0 {
		i = encodeVarintGiveaway(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGiveaway(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintGiveaway(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGiveaway(dAtA []byte, offset int, v uint64) int {
	offset -= sovGiveaway(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Giveaway) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovGiveaway(uint64(m.Index))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGiveaway(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovGiveaway(uint64(m.Duration))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovGiveaway(uint64(m.CreatedAt))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGiveaway(uint64(l))
	}
	if len(m.Prizes) > 0 {
		for _, e := range m.Prizes {
			l = e.Size()
			n += 1 + l + sovGiveaway(uint64(l))
		}
	}
	if m.CompletionHeight != 0 {
		n += 1 + sovGiveaway(uint64(m.CompletionHeight))
	}
	if m.Status != 0 {
		n += 1 + sovGiveaway(uint64(m.Status))
	}
	if len(m.WinningTicketNumbers) > 0 {
		l = 0
		for _, e := range m.WinningTicketNumbers {
			l += sovGiveaway(uint64(e))
		}
		n += 1 + sovGiveaway(uint64(l)) + l
	}
	return n
}

func sovGiveaway(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGiveaway(x uint64) (n int) {
	return sovGiveaway(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Giveaway) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGiveaway
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Giveaway: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Giveaway: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiveaway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiveaway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGiveaway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGiveaway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiveaway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiveaway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiveaway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGiveaway
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGiveaway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiveaway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGiveaway
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGiveaway
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prizes = append(m.Prizes, Prize{})
			if err := m.Prizes[len(m.Prizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionHeight", wireType)
			}
			m.CompletionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiveaway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGiveaway
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= GiveawayStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGiveaway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WinningTicketNumbers = append(m.WinningTicketNumbers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGiveaway
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGiveaway
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGiveaway
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WinningTicketNumbers) == 0 {
					m.WinningTicketNumbers = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGiveaway
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WinningTicketNumbers = append(m.WinningTicketNumbers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningTicketNumbers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGiveaway(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGiveaway
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGiveaway(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGiveaway
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGiveaway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGiveaway
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGiveaway
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGiveaway
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGiveaway
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGiveaway        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGiveaway          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGiveaway = fmt.Errorf("proto: unexpected end of group")
)
