// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giveaway/ticket_count.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TicketCount struct {
	GiveawayId uint32 `protobuf:"varint,1,opt,name=giveawayId,proto3" json:"giveawayId,omitempty"`
	Count      uint32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *TicketCount) Reset()         { *m = TicketCount{} }
func (m *TicketCount) String() string { return proto.CompactTextString(m) }
func (*TicketCount) ProtoMessage()    {}
func (*TicketCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_93e48ab119ec1fd5, []int{0}
}
func (m *TicketCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TicketCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TicketCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TicketCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketCount.Merge(m, src)
}
func (m *TicketCount) XXX_Size() int {
	return m.Size()
}
func (m *TicketCount) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketCount.DiscardUnknown(m)
}

var xxx_messageInfo_TicketCount proto.InternalMessageInfo

func (m *TicketCount) GetGiveawayId() uint32 {
	if m != nil {
		return m.GiveawayId
	}
	return 0
}

func (m *TicketCount) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*TicketCount)(nil), "dreanity.saturn.giveaway.TicketCount")
}

func init() { proto.RegisterFile("giveaway/ticket_count.proto", fileDescriptor_93e48ab119ec1fd5) }

var fileDescriptor_93e48ab119ec1fd5 = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0xcf, 0x2c, 0x4b,
	0x4d, 0x2c, 0x4f, 0xac, 0xd4, 0x2f, 0xc9, 0x4c, 0xce, 0x4e, 0x2d, 0x89, 0x4f, 0xce, 0x2f, 0xcd,
	0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0x48, 0x29, 0x4a, 0x4d, 0xcc, 0xcb, 0x2c,
	0xa9, 0xd4, 0x2b, 0x4e, 0x2c, 0x29, 0x2d, 0xca, 0xd3, 0x83, 0x29, 0x56, 0x72, 0xe6, 0xe2, 0x0e,
	0x01, 0xab, 0x77, 0x06, 0x29, 0x17, 0x92, 0xe3, 0xe2, 0x82, 0x49, 0x79, 0xa6, 0x48, 0x30, 0x2a,
	0x30, 0x6a, 0xf0, 0x06, 0x21, 0x89, 0x08, 0x89, 0x70, 0xb1, 0x82, 0xcd, 0x95, 0x60, 0x02, 0x4b,
	0x41, 0x38, 0x4e, 0xae, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c,
	0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0xa5, 0x9d,
	0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0x73, 0x83, 0x3e, 0xc4, 0x0d,
	0xfa, 0x15, 0xfa, 0x08, 0x27, 0x57, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x1d, 0x6b, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x62, 0xa0, 0x4c, 0x3f, 0xcb, 0x00, 0x00, 0x00,
}

func (m *TicketCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TicketCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TicketCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintTicketCount(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.GiveawayId != 0 {
		i = encodeVarintTicketCount(dAtA, i, uint64(m.GiveawayId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTicketCount(dAtA []byte, offset int, v uint64) int {
	offset -= sovTicketCount(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TicketCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GiveawayId != 0 {
		n += 1 + sovTicketCount(uint64(m.GiveawayId))
	}
	if m.Count != 0 {
		n += 1 + sovTicketCount(uint64(m.Count))
	}
	return n
}

func sovTicketCount(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTicketCount(x uint64) (n int) {
	return sovTicketCount(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TicketCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTicketCount
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TicketCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TicketCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveawayId", wireType)
			}
			m.GiveawayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicketCount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiveawayId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTicketCount
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTicketCount(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTicketCount
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTicketCount(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTicketCount
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicketCount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTicketCount
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTicketCount
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTicketCount
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTicketCount
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTicketCount        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTicketCount          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTicketCount = fmt.Errorf("proto: unexpected end of group")
)
