// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: giveaway/event.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GiveawayCreated struct {
	Index                uint32         `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Creator              string         `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	Duration             int64          `protobuf:"varint,3,opt,name=duration,proto3" json:"duration,omitempty"`
	CreatedAt            int64          `protobuf:"varint,4,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	Name                 string         `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Prizes               []Prize        `protobuf:"bytes,6,rep,name=prizes,proto3" json:"prizes"`
	CompletionHeight     int64          `protobuf:"varint,7,opt,name=completionHeight,proto3" json:"completionHeight,omitempty"`
	Status               GiveawayStatus `protobuf:"varint,8,opt,name=status,proto3,enum=dreanity.saturn.giveaway.GiveawayStatus" json:"status,omitempty"`
	WinningTicketNumbers []uint32       `protobuf:"varint,9,rep,packed,name=winningTicketNumbers,proto3" json:"winningTicketNumbers,omitempty"`
}

func (m *GiveawayCreated) Reset()         { *m = GiveawayCreated{} }
func (m *GiveawayCreated) String() string { return proto.CompactTextString(m) }
func (*GiveawayCreated) ProtoMessage()    {}
func (*GiveawayCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e360be73bcfd879, []int{0}
}
func (m *GiveawayCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiveawayCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiveawayCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiveawayCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiveawayCreated.Merge(m, src)
}
func (m *GiveawayCreated) XXX_Size() int {
	return m.Size()
}
func (m *GiveawayCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_GiveawayCreated.DiscardUnknown(m)
}

var xxx_messageInfo_GiveawayCreated proto.InternalMessageInfo

func (m *GiveawayCreated) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GiveawayCreated) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GiveawayCreated) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *GiveawayCreated) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *GiveawayCreated) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GiveawayCreated) GetPrizes() []Prize {
	if m != nil {
		return m.Prizes
	}
	return nil
}

func (m *GiveawayCreated) GetCompletionHeight() int64 {
	if m != nil {
		return m.CompletionHeight
	}
	return 0
}

func (m *GiveawayCreated) GetStatus() GiveawayStatus {
	if m != nil {
		return m.Status
	}
	return GiveawayStatus_TICKETS_REGISTRATION
}

func (m *GiveawayCreated) GetWinningTicketNumbers() []uint32 {
	if m != nil {
		return m.WinningTicketNumbers
	}
	return nil
}

type GiveawayWinnersDeterminationBegun struct {
	GiveawayId      uint32 `protobuf:"varint,1,opt,name=giveawayId,proto3" json:"giveawayId,omitempty"`
	RandomnessRound uint64 `protobuf:"varint,2,opt,name=randomnessRound,proto3" json:"randomnessRound,omitempty"`
}

func (m *GiveawayWinnersDeterminationBegun) Reset()         { *m = GiveawayWinnersDeterminationBegun{} }
func (m *GiveawayWinnersDeterminationBegun) String() string { return proto.CompactTextString(m) }
func (*GiveawayWinnersDeterminationBegun) ProtoMessage()    {}
func (*GiveawayWinnersDeterminationBegun) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e360be73bcfd879, []int{1}
}
func (m *GiveawayWinnersDeterminationBegun) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiveawayWinnersDeterminationBegun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiveawayWinnersDeterminationBegun.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiveawayWinnersDeterminationBegun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiveawayWinnersDeterminationBegun.Merge(m, src)
}
func (m *GiveawayWinnersDeterminationBegun) XXX_Size() int {
	return m.Size()
}
func (m *GiveawayWinnersDeterminationBegun) XXX_DiscardUnknown() {
	xxx_messageInfo_GiveawayWinnersDeterminationBegun.DiscardUnknown(m)
}

var xxx_messageInfo_GiveawayWinnersDeterminationBegun proto.InternalMessageInfo

func (m *GiveawayWinnersDeterminationBegun) GetGiveawayId() uint32 {
	if m != nil {
		return m.GiveawayId
	}
	return 0
}

func (m *GiveawayWinnersDeterminationBegun) GetRandomnessRound() uint64 {
	if m != nil {
		return m.RandomnessRound
	}
	return 0
}

type GiveawayCancelledInsufTickets struct {
	GiveawayId uint32 `protobuf:"varint,1,opt,name=giveawayId,proto3" json:"giveawayId,omitempty"`
}

func (m *GiveawayCancelledInsufTickets) Reset()         { *m = GiveawayCancelledInsufTickets{} }
func (m *GiveawayCancelledInsufTickets) String() string { return proto.CompactTextString(m) }
func (*GiveawayCancelledInsufTickets) ProtoMessage()    {}
func (*GiveawayCancelledInsufTickets) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e360be73bcfd879, []int{2}
}
func (m *GiveawayCancelledInsufTickets) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiveawayCancelledInsufTickets) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiveawayCancelledInsufTickets.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiveawayCancelledInsufTickets) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiveawayCancelledInsufTickets.Merge(m, src)
}
func (m *GiveawayCancelledInsufTickets) XXX_Size() int {
	return m.Size()
}
func (m *GiveawayCancelledInsufTickets) XXX_DiscardUnknown() {
	xxx_messageInfo_GiveawayCancelledInsufTickets.DiscardUnknown(m)
}

var xxx_messageInfo_GiveawayCancelledInsufTickets proto.InternalMessageInfo

func (m *GiveawayCancelledInsufTickets) GetGiveawayId() uint32 {
	if m != nil {
		return m.GiveawayId
	}
	return 0
}

type GiveawayWinnersDetermined struct {
	GiveawayId     uint32   `protobuf:"varint,1,opt,name=giveawayId,proto3" json:"giveawayId,omitempty"`
	WinnersNumbers []uint32 `protobuf:"varint,2,rep,packed,name=winnersNumbers,proto3" json:"winnersNumbers,omitempty"`
}

func (m *GiveawayWinnersDetermined) Reset()         { *m = GiveawayWinnersDetermined{} }
func (m *GiveawayWinnersDetermined) String() string { return proto.CompactTextString(m) }
func (*GiveawayWinnersDetermined) ProtoMessage()    {}
func (*GiveawayWinnersDetermined) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e360be73bcfd879, []int{3}
}
func (m *GiveawayWinnersDetermined) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GiveawayWinnersDetermined) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GiveawayWinnersDetermined.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GiveawayWinnersDetermined) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GiveawayWinnersDetermined.Merge(m, src)
}
func (m *GiveawayWinnersDetermined) XXX_Size() int {
	return m.Size()
}
func (m *GiveawayWinnersDetermined) XXX_DiscardUnknown() {
	xxx_messageInfo_GiveawayWinnersDetermined.DiscardUnknown(m)
}

var xxx_messageInfo_GiveawayWinnersDetermined proto.InternalMessageInfo

func (m *GiveawayWinnersDetermined) GetGiveawayId() uint32 {
	if m != nil {
		return m.GiveawayId
	}
	return 0
}

func (m *GiveawayWinnersDetermined) GetWinnersNumbers() []uint32 {
	if m != nil {
		return m.WinnersNumbers
	}
	return nil
}

type TicketCreated struct {
	Index           uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	GiveawayId      uint32 `protobuf:"varint,2,opt,name=giveawayId,proto3" json:"giveawayId,omitempty"`
	ParticipantId   string `protobuf:"bytes,3,opt,name=participantId,proto3" json:"participantId,omitempty"`
	ParticipantName string `protobuf:"bytes,4,opt,name=participantName,proto3" json:"participantName,omitempty"`
	TicketCount     uint32 `protobuf:"varint,5,opt,name=ticketCount,proto3" json:"ticketCount,omitempty"`
}

func (m *TicketCreated) Reset()         { *m = TicketCreated{} }
func (m *TicketCreated) String() string { return proto.CompactTextString(m) }
func (*TicketCreated) ProtoMessage()    {}
func (*TicketCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_5e360be73bcfd879, []int{4}
}
func (m *TicketCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TicketCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TicketCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TicketCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TicketCreated.Merge(m, src)
}
func (m *TicketCreated) XXX_Size() int {
	return m.Size()
}
func (m *TicketCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_TicketCreated.DiscardUnknown(m)
}

var xxx_messageInfo_TicketCreated proto.InternalMessageInfo

func (m *TicketCreated) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *TicketCreated) GetGiveawayId() uint32 {
	if m != nil {
		return m.GiveawayId
	}
	return 0
}

func (m *TicketCreated) GetParticipantId() string {
	if m != nil {
		return m.ParticipantId
	}
	return ""
}

func (m *TicketCreated) GetParticipantName() string {
	if m != nil {
		return m.ParticipantName
	}
	return ""
}

func (m *TicketCreated) GetTicketCount() uint32 {
	if m != nil {
		return m.TicketCount
	}
	return 0
}

func init() {
	proto.RegisterType((*GiveawayCreated)(nil), "dreanity.saturn.giveaway.GiveawayCreated")
	proto.RegisterType((*GiveawayWinnersDeterminationBegun)(nil), "dreanity.saturn.giveaway.GiveawayWinnersDeterminationBegun")
	proto.RegisterType((*GiveawayCancelledInsufTickets)(nil), "dreanity.saturn.giveaway.GiveawayCancelledInsufTickets")
	proto.RegisterType((*GiveawayWinnersDetermined)(nil), "dreanity.saturn.giveaway.GiveawayWinnersDetermined")
	proto.RegisterType((*TicketCreated)(nil), "dreanity.saturn.giveaway.TicketCreated")
}

func init() { proto.RegisterFile("giveaway/event.proto", fileDescriptor_5e360be73bcfd879) }

var fileDescriptor_5e360be73bcfd879 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xd1, 0x6e, 0xd3, 0x30,
	0x14, 0x6d, 0xda, 0xae, 0x5b, 0xef, 0xd4, 0x0d, 0x59, 0x95, 0x08, 0x15, 0x64, 0xa1, 0x42, 0x28,
	0x02, 0x29, 0x91, 0xca, 0x33, 0x02, 0x0a, 0x08, 0xfa, 0x32, 0xa1, 0x80, 0x84, 0xc4, 0x9b, 0x9b,
	0x5c, 0x32, 0x8b, 0xc6, 0x8e, 0x6c, 0x67, 0x5d, 0xf9, 0x0a, 0xfe, 0x86, 0x5f, 0xd8, 0xe3, 0x1e,
	0x79, 0x42, 0xa8, 0xfd, 0x01, 0x3e, 0x01, 0xc5, 0x69, 0xba, 0xae, 0xa3, 0xdb, 0x9b, 0x7d, 0xee,
	0xf1, 0x3d, 0x57, 0xe7, 0x1e, 0x43, 0x37, 0x61, 0xa7, 0x48, 0xa7, 0x74, 0x16, 0xe0, 0x29, 0x72,
	0xed, 0x67, 0x52, 0x68, 0x41, 0xec, 0x58, 0x22, 0xe5, 0x4c, 0xcf, 0x7c, 0x45, 0x75, 0x2e, 0xb9,
	0x5f, 0xb1, 0x7a, 0xdd, 0x44, 0x24, 0xc2, 0x90, 0x82, 0xe2, 0x54, 0xf2, 0x7b, 0x77, 0x57, 0x5d,
	0xaa, 0xc3, 0xb2, 0x70, 0xd9, 0x3e, 0x93, 0xec, 0x3b, 0x96, 0x68, 0xff, 0x6f, 0x1d, 0x0e, 0xdf,
	0x2d, 0x0b, 0xaf, 0x25, 0x52, 0x8d, 0x31, 0xe9, 0xc2, 0x0e, 0xe3, 0x31, 0x9e, 0xd9, 0x96, 0x6b,
	0x79, 0x9d, 0xb0, 0xbc, 0x10, 0x1b, 0x76, 0xa3, 0x82, 0x20, 0xa4, 0x5d, 0x77, 0x2d, 0xaf, 0x1d,
	0x56, 0x57, 0xd2, 0x83, 0xbd, 0x38, 0x97, 0x54, 0x33, 0xc1, 0xed, 0x86, 0x6b, 0x79, 0x8d, 0x70,
	0x75, 0x27, 0xf7, 0xa1, 0x1d, 0x95, 0x6d, 0x5f, 0x69, 0xbb, 0x69, 0x8a, 0x97, 0x00, 0x21, 0xd0,
	0xe4, 0x34, 0x45, 0x7b, 0xc7, 0x34, 0x34, 0x67, 0xf2, 0x1c, 0x5a, 0x66, 0x40, 0x65, 0xb7, 0xdc,
	0x86, 0xb7, 0x3f, 0x38, 0xf2, 0xb7, 0x39, 0xe0, 0x7f, 0x28, 0x78, 0xc3, 0xe6, 0xf9, 0xef, 0xa3,
	0x5a, 0xb8, 0x7c, 0x44, 0x9e, 0xc0, 0x9d, 0x48, 0xa4, 0xd9, 0x04, 0x0b, 0xf9, 0xf7, 0xc8, 0x92,
	0x13, 0x6d, 0xef, 0x1a, 0xdd, 0x6b, 0x38, 0x79, 0x09, 0x2d, 0xa5, 0xa9, 0xce, 0x95, 0xbd, 0xe7,
	0x5a, 0xde, 0xc1, 0xc0, 0xdb, 0x2e, 0x55, 0x79, 0xf4, 0xd1, 0xf0, 0xc3, 0xe5, 0x3b, 0x32, 0x80,
	0xee, 0x94, 0x71, 0xce, 0x78, 0xf2, 0x89, 0x45, 0xdf, 0x50, 0x1f, 0xe7, 0xe9, 0x18, 0xa5, 0xb2,
	0xdb, 0x6e, 0xc3, 0xeb, 0x84, 0xff, 0xad, 0xf5, 0x53, 0x78, 0x58, 0x75, 0xfb, 0xcc, 0x38, 0x47,
	0xa9, 0xde, 0xa0, 0x46, 0x99, 0x32, 0x6e, 0x2c, 0x1b, 0x62, 0x92, 0x73, 0xe2, 0x00, 0x54, 0xda,
	0xa3, 0x78, 0xb9, 0x88, 0x35, 0x84, 0x78, 0x70, 0x28, 0x29, 0x8f, 0x45, 0xca, 0x51, 0xa9, 0x50,
	0xe4, 0x3c, 0x36, 0x5b, 0x69, 0x86, 0x9b, 0x70, 0xff, 0x05, 0x3c, 0x58, 0x2d, 0x98, 0xf2, 0x08,
	0x27, 0x13, 0x8c, 0x47, 0x5c, 0xe5, 0x5f, 0xcb, 0xa9, 0xd4, 0x6d, 0x52, 0xfd, 0x08, 0xee, 0x6d,
	0x99, 0x17, 0xe3, 0x5b, 0xe7, 0x7c, 0x0c, 0x07, 0xd3, 0xf2, 0x51, 0x65, 0x4d, 0xdd, 0x58, 0xb3,
	0x81, 0xf6, 0x7f, 0x5a, 0xd0, 0x29, 0x07, 0xba, 0x39, 0x85, 0x57, 0xf5, 0xea, 0xd7, 0xf4, 0x1e,
	0x41, 0x27, 0xa3, 0x52, 0xb3, 0x88, 0x65, 0x94, 0xeb, 0x51, 0x6c, 0x02, 0xd9, 0x0e, 0xaf, 0x82,
	0x85, 0x7b, 0x6b, 0xc0, 0x71, 0x11, 0xc1, 0xa6, 0xe1, 0x6d, 0xc2, 0xc4, 0x85, 0x7d, 0x5d, 0x8e,
	0x25, 0x72, 0xae, 0x4d, 0x50, 0x3b, 0xe1, 0x3a, 0x34, 0x7c, 0x7b, 0x3e, 0x77, 0xac, 0x8b, 0xb9,
	0x63, 0xfd, 0x99, 0x3b, 0xd6, 0x8f, 0x85, 0x53, 0xbb, 0x58, 0x38, 0xb5, 0x5f, 0x0b, 0xa7, 0xf6,
	0xe5, 0x69, 0xc2, 0xf4, 0x49, 0x3e, 0xf6, 0x23, 0x91, 0x06, 0x55, 0xb0, 0x82, 0x32, 0x58, 0xc1,
	0xd9, 0xea, 0x7b, 0x06, 0x7a, 0x96, 0xa1, 0x1a, 0xb7, 0xcc, 0x7f, 0x7c, 0xf6, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0x11, 0x8f, 0x20, 0x25, 0x06, 0x04, 0x00, 0x00,
}

func (m *GiveawayCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiveawayCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiveawayCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WinningTicketNumbers) > 0 {
		dAtA2 := make([]byte, len(m.WinningTicketNumbers)*10)
		var j1 int
		for _, num := range m.WinningTicketNumbers {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEvent(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if m.Status != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x40
	}
	if m.CompletionHeight != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CompletionHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Prizes) > 0 {
		for iNdEx := len(m.Prizes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Prizes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CreatedAt != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x20
	}
	if m.Duration != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Index != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GiveawayWinnersDeterminationBegun) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiveawayWinnersDeterminationBegun) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiveawayWinnersDeterminationBegun) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RandomnessRound != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.RandomnessRound))
		i--
		dAtA[i] = 0x10
	}
	if m.GiveawayId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.GiveawayId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GiveawayCancelledInsufTickets) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiveawayCancelledInsufTickets) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiveawayCancelledInsufTickets) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GiveawayId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.GiveawayId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GiveawayWinnersDetermined) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GiveawayWinnersDetermined) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GiveawayWinnersDetermined) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WinnersNumbers) > 0 {
		dAtA4 := make([]byte, len(m.WinnersNumbers)*10)
		var j3 int
		for _, num := range m.WinnersNumbers {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintEvent(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.GiveawayId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.GiveawayId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TicketCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TicketCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TicketCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TicketCount != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.TicketCount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ParticipantName) > 0 {
		i -= len(m.ParticipantName)
		copy(dAtA[i:], m.ParticipantName)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ParticipantName)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ParticipantId) > 0 {
		i -= len(m.ParticipantId)
		copy(dAtA[i:], m.ParticipantId)
		i = encodeVarintEvent(dAtA, i, uint64(len(m.ParticipantId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.GiveawayId != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.GiveawayId))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintEvent(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GiveawayCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovEvent(uint64(m.Index))
	}
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.Duration != 0 {
		n += 1 + sovEvent(uint64(m.Duration))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovEvent(uint64(m.CreatedAt))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if len(m.Prizes) > 0 {
		for _, e := range m.Prizes {
			l = e.Size()
			n += 1 + l + sovEvent(uint64(l))
		}
	}
	if m.CompletionHeight != 0 {
		n += 1 + sovEvent(uint64(m.CompletionHeight))
	}
	if m.Status != 0 {
		n += 1 + sovEvent(uint64(m.Status))
	}
	if len(m.WinningTicketNumbers) > 0 {
		l = 0
		for _, e := range m.WinningTicketNumbers {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	return n
}

func (m *GiveawayWinnersDeterminationBegun) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GiveawayId != 0 {
		n += 1 + sovEvent(uint64(m.GiveawayId))
	}
	if m.RandomnessRound != 0 {
		n += 1 + sovEvent(uint64(m.RandomnessRound))
	}
	return n
}

func (m *GiveawayCancelledInsufTickets) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GiveawayId != 0 {
		n += 1 + sovEvent(uint64(m.GiveawayId))
	}
	return n
}

func (m *GiveawayWinnersDetermined) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GiveawayId != 0 {
		n += 1 + sovEvent(uint64(m.GiveawayId))
	}
	if len(m.WinnersNumbers) > 0 {
		l = 0
		for _, e := range m.WinnersNumbers {
			l += sovEvent(uint64(e))
		}
		n += 1 + sovEvent(uint64(l)) + l
	}
	return n
}

func (m *TicketCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sovEvent(uint64(m.Index))
	}
	if m.GiveawayId != 0 {
		n += 1 + sovEvent(uint64(m.GiveawayId))
	}
	l = len(m.ParticipantId)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	l = len(m.ParticipantName)
	if l > 0 {
		n += 1 + l + sovEvent(uint64(l))
	}
	if m.TicketCount != 0 {
		n += 1 + sovEvent(uint64(m.TicketCount))
	}
	return n
}

func sovEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvent(x uint64) (n int) {
	return sovEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GiveawayCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiveawayCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiveawayCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prizes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prizes = append(m.Prizes, Prize{})
			if err := m.Prizes[len(m.Prizes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionHeight", wireType)
			}
			m.CompletionHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompletionHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= GiveawayStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WinningTicketNumbers = append(m.WinningTicketNumbers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WinningTicketNumbers) == 0 {
					m.WinningTicketNumbers = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WinningTicketNumbers = append(m.WinningTicketNumbers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WinningTicketNumbers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiveawayWinnersDeterminationBegun) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiveawayWinnersDeterminationBegun: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiveawayWinnersDeterminationBegun: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveawayId", wireType)
			}
			m.GiveawayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiveawayId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomnessRound", wireType)
			}
			m.RandomnessRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomnessRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiveawayCancelledInsufTickets) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiveawayCancelledInsufTickets: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiveawayCancelledInsufTickets: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveawayId", wireType)
			}
			m.GiveawayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiveawayId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GiveawayWinnersDetermined) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GiveawayWinnersDetermined: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GiveawayWinnersDetermined: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveawayId", wireType)
			}
			m.GiveawayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiveawayId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WinnersNumbers = append(m.WinnersNumbers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEvent
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEvent
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WinnersNumbers) == 0 {
					m.WinnersNumbers = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WinnersNumbers = append(m.WinnersNumbers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WinnersNumbers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TicketCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TicketCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TicketCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GiveawayId", wireType)
			}
			m.GiveawayId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GiveawayId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParticipantName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParticipantName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketCount", wireType)
			}
			m.TicketCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvent = fmt.Errorf("proto: unexpected end of group")
)
