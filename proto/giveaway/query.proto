syntax = "proto3";
package dreanity.saturn.giveaway;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "giveaway/params.proto";
import "giveaway/giveaway.proto";
import "giveaway/giveaway_count.proto";
import "giveaway/giveaway_by_height.proto";
import "giveaway/giveaway_by_randomness.proto";
import "giveaway/ticket.proto";
import "giveaway/ticket_count.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/dreanity/saturn/x/giveaway/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/dreanity/saturn/giveaway/params";
  }
  // Queries a Giveaway by index.
	rpc Giveaway(QueryGetGiveawayRequest) returns (QueryGetGiveawayResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/giveaway/{index}";
	}

	// Queries a list of Giveaway items.
	rpc GiveawayAll(QueryAllGiveawayRequest) returns (QueryAllGiveawayResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/giveaway";
	}

// Queries a GiveawayCount by index.
	rpc GiveawayCount(QueryGetGiveawayCountRequest) returns (QueryGetGiveawayCountResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/giveaway_count";
	}
// Queries a GiveawayByHeight by index.
	rpc GiveawayByHeight(QueryGetGiveawayByHeightRequest) returns (QueryGetGiveawayByHeightResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/giveaway_by_height/{height}";
	}

	// Queries a list of GiveawayByHeight items.
	rpc GiveawayByHeightAll(QueryAllGiveawayByHeightRequest) returns (QueryAllGiveawayByHeightResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/giveaway_by_height";
	}

// Queries a GiveawayByRandomness by index.
	rpc GiveawayByRandomness(QueryGetGiveawayByRandomnessRequest) returns (QueryGetGiveawayByRandomnessResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/giveaway_by_randomness/{round}";
	}

	// Queries a list of GiveawayByRandomness items.
	rpc GiveawayByRandomnessAll(QueryAllGiveawayByRandomnessRequest) returns (QueryAllGiveawayByRandomnessResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/giveaway_by_randomness";
	}

// Queries a Ticket by index.
	rpc Ticket(QueryGetTicketRequest) returns (QueryGetTicketResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/ticket/{index}";
	}

	// Queries a list of Ticket items.
	rpc TicketAll(QueryAllTicketRequest) returns (QueryAllTicketResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/ticket";
	}

// Queries a TicketCount by index.
	rpc TicketCount(QueryGetTicketCountRequest) returns (QueryGetTicketCountResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/ticket_count/{giveawayId}";
	}

	// Queries a list of TicketCount items.
	rpc TicketCountAll(QueryAllTicketCountRequest) returns (QueryAllTicketCountResponse) {
		option (google.api.http).get = "/dreanity/saturn/giveaway/ticket_count";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetGiveawayRequest {
	  uint32 index = 1;

}

message QueryGetGiveawayResponse {
	Giveaway giveaway = 1 [(gogoproto.nullable) = false];
}

message QueryAllGiveawayRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGiveawayResponse {
	repeated Giveaway giveaway = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetGiveawayCountRequest {}

message QueryGetGiveawayCountResponse {
	GiveawayCount GiveawayCount = 1 [(gogoproto.nullable) = false];
}
message QueryGetGiveawayByHeightRequest {
	  int64 height = 1;

}

message QueryGetGiveawayByHeightResponse {
	GiveawayByHeight giveawayByHeight = 1 [(gogoproto.nullable) = false];
}

message QueryAllGiveawayByHeightRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGiveawayByHeightResponse {
	repeated GiveawayByHeight giveawayByHeight = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetGiveawayByRandomnessRequest {
	  uint64 round = 1;

}

message QueryGetGiveawayByRandomnessResponse {
	GiveawayByRandomness giveawayByRandomness = 1 [(gogoproto.nullable) = false];
}

message QueryAllGiveawayByRandomnessRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllGiveawayByRandomnessResponse {
	repeated GiveawayByRandomness giveawayByRandomness = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTicketRequest {
	uint32 giveawayId = 1;
	uint32 index = 2;
}

message QueryGetTicketResponse {
	Ticket ticket = 1 [(gogoproto.nullable) = false];
}

message QueryAllTicketRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTicketResponse {
	repeated Ticket ticket = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetTicketCountRequest {
	  uint32 giveawayId = 1;

}

message QueryGetTicketCountResponse {
	TicketCount ticketCount = 1 [(gogoproto.nullable) = false];
}

message QueryAllTicketCountRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllTicketCountResponse {
	repeated TicketCount ticketCount = 1 [(gogoproto.nullable) = false];
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
